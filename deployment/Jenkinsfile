pipeline {
    agent any

/*
  environment {
    PROJECT = "hbl-poc-enterprisefac-pm-prj"
    APP_NAME = "latency"
    FE_SVC_NAME = "${APP_NAME}-frontend"
    CLUSTER = "jenkins-cd"
    CLUSTER_ZONE = "us-east1-d"
    IMAGE_TAG = "gcr.io/${PROJECT}/${APP_NAME}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"
    JENKINS_CRED = "${PROJECT}"
  }
**/
  stages {
       stage ('transfer image tar from SFTP to agent') {
      steps {
        sh 'echo "transferring image from sftp to agent"'
        }
    }
    stage ('create image from tar') {
      steps {
        sh 'echo "image from tar created"'
        }
    }
    stage ('push image to quay') {
      steps {
        sh 'echo "tagging the image with $release_version and build no"'
        sh 'echo "pushing image to quauy"'
        }
    }
    stage ('verify image scan results') {
      steps {
        sh 'echo "checking image scan results and based on that perform next step"'
        }
    }
    stage ('Git Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/shefug/governor.git'
        }
    }
    stage ('updating deployment file with new version') {
      steps {
        sh 'cat deployment/deployment.yml'
        sh("sed -i.bak 's#image_tag#${release_version}#' ./deployment/*.yml")
        }
    }
    /*
    stage('Build and push image with Container Builder') {
      steps {
        container('gcloud') {
          sh "PYTHONUNBUFFERED=1 gcloud builds submit -t ${IMAGE_TAG} ."
        }
      }
    }**/
    stage('Deploy Production') {
      // Production branch
      //when { branch 'master' }
      steps{
        withDockerContainer('google/cloud-sdk') {
        // Change deployed image in canary to the one we just built
          sh 'cat deployment/deployment.yml'
          //sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' ./k8s/production/*.yaml")
          //step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          step([$class: 'KubernetesEngineBuilder', projectId: 'hbl-poc-enterprisefac-pm-prj', clusterName: 'governor-ef-poc-cluster', zone: 'us-central1', manifestPattern: 'deployment/.', credentialsId: 'hbl-poc-enterprisefac-pm-prj', verifyDeployments: true])
          //sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")
        }
      }
    }
        stage('Rollback in case of failure') {
      // Production branch
      //when { branch 'master' }
      steps{
        withDockerContainer('google/cloud-sdk') {
        // Change deployed image in canary to the one we just built
          sh 'cat deployment/deployment.yml'
          //sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' ./k8s/production/*.yaml")
          //step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          //step([$class: 'KubernetesEngineBuilder', projectId: 'hbl-poc-enterprisefac-pm-prj', clusterName: 'governor-ef-poc-cluster', zone: 'us-central1', manifestPattern: 'deployment/.', credentialsId: 'hbl-poc-enterprisefac-pm-prj', verifyDeployments: true])
          //sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")
        }
      }
    }

    /*
    stage('Deploy Dev') {
      // Developer Branches
      when {
        not { branch 'master' }
        not { branch 'canary' }
      }
      steps {
        container('kubectl') {
          // Create namespace if it doesn't exist
          sh("kubectl get ns ${env.BRANCH_NAME} || kubectl create ns ${env.BRANCH_NAME}")
          // Don't use public load balancing for development branches
          sh("sed -i.bak 's#LoadBalancer#ClusterIP#' ./k8s/services/frontend.yaml")
          sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' ./k8s/dev/*.yaml")
          step([$class: 'KubernetesEngineBuilder', namespace: "${env.BRANCH_NAME}", projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          step([$class: 'KubernetesEngineBuilder', namespace: "${env.BRANCH_NAME}", projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/dev', credentialsId: env.JENKINS_CRED, verifyDeployments: true])
          echo 'To access your environment run `kubectl proxy`'
          echo "Then access your service via http://localhost:8001/api/v1/proxy/namespaces/${env.BRANCH_NAME}/services/${FE_SVC_NAME}:80/"
        }
      }
    }**/
  }
}
