pipeline {
    agent any

  stages {
       stage ('transfer image tar from SFTP to agent') {
      steps {
        sh 'echo "transferring image from sftp to agent"'
        }
    }
    stage ('create image from tar') {
      steps {
        sh 'echo "image from tar created"'
        }
    }
    stage ('push image to quay') {
      steps {
        sh 'echo "tagging the image with $release_version and build no"'
        sh 'echo "pushing image to quauy"'
        }
    }
    stage ('verify image scan results') {
      steps {
        sh 'echo "checking image scan results and based on that perform next step"'
        }
    }
    
    stage ('updating deployment file with new version') {
      steps {
        sh 'cat deployment/deployment.yml'
        sh("sed -i.bak 's#image_tag#${release_version}#' ./deployment/*.yml")
        }
    }

    stage('Deploy Production') {
      // Production branch
      //when { branch 'master' }
      steps{
        withDockerContainer('google/cloud-sdk') {
        // Change deployed image in canary to the one we just built
          sh 'cat deployment/deployment.yml'
          //sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' ./k8s/production/*.yaml")
          //step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          step([$class: 'KubernetesEngineBuilder', projectId: 'hbl-poc-enterprisefac-pm-prj', clusterName: 'governor-ef-poc-cluster', zone: 'us-central1', manifestPattern: 'deployment/.', credentialsId: 'hbl-poc-enterprisefac-pm-prj', verifyDeployments: true])
          //sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")
        }
      }
    }
        stage('Rollback in case of failure') {
      // Production branch
      //when { branch 'master' }
      steps{
        withDockerContainer('google/cloud-sdk') {
        // Change deployed image in canary to the one we just built
          sh 'cat deployment/deployment.yml'
          //sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' ./k8s/production/*.yaml")
          //step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          //step([$class: 'KubernetesEngineBuilder', projectId: 'hbl-poc-enterprisefac-pm-prj', clusterName: 'governor-ef-poc-cluster', zone: 'us-central1', manifestPattern: 'deployment/.', credentialsId: 'hbl-poc-enterprisefac-pm-prj', verifyDeployments: true])
          //sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")
        }
      }
    }
  }
}
